{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  // Databases ef core (dbcontext) connections strings
  "ConnectionStrings": {
    "IdentityServerConfigurationDbContext": "Server=localhost;Port=5432;Database=identity_server_admin;User Id=postgres;Password=postgres;",
    "IdentityServerPersistedGrantDbContext": "Server=localhost;Port=5432;Database=identity_server_admin;User Id=postgres;Password=postgres;",
    "IdentityServerIdentityDbContext<Guid>": "Server=localhost;Port=5432;Database=identity_server_admin;User Id=postgres;Password=postgres;",
    "IdentityServerDataProtectionDbContext": "Server=localhost;Port=5432;Database=identity_server_admin;User Id=postgres;Password=postgres;"
  },
  // Application specific options.
  "AdminConfiguration": {
    "PageTitle": "Midone Duende IdentityServer",
    "HomePageLogoUri": "~/images/NGordat-icon.png",
    "FaviconUri": "~/favicon.ico",
    "Theme": null,
    "CustomThemeCss": null,
    "IdentityAdminBaseUrl": "https://localhost:44303",
    "AdministrationRole": "IdentityAdminAdministrator"
  },
  "AllowedHosts": "*",
  "BasePath": "",
  // Login configuration
  "LoginConfiguration": {
    // Available ResolutionPolicies: Username, Email
    "ResolutionPolicy": "Email"
  },
  // Register configuration
  "RegisterConfiguration": {
    // TODO? : Allows user self registration.
    "Enabled": false
  },
  // ASP.Net standard configuration options
  "IdentityOptions": {
    "Password": {
      "RequiredLength": 8
    },
    "User": {
      "RequireUniqueEmail": true
    },
    "SignIn": {
      "RequireConfirmedAccount": false
    }
  },
  // Duende Identity Server options
  "IdentityServerOptions": {
    "KeyManagement": {
      "Enabled": true
    },
    "Events": {
      "RaiseErrorEvents": true,
      "RaiseInformationEvents": true,
      "RaiseFailureEvents": true,
      "RaiseSuccessEvents": true
    }
  },
  // Data Protection options.
  // Configuration for internal Identity / Session Security
  "DataProtectionConfiguration": {
    "ProtectKeysWithAzureKeyVault": false
  },
  // Azure Key Vault options.
  // Used if you opted-in with DataProtectionConfiguration__ProtectKeysWithAzureKeyVault: true
  // FIXME: Currently broken
  "AzureKeyVaultConfiguration": {
    "AzureKeyVaultEndpoint": "",
    "ClientId": "",
    "ClientSecret": "",
    "TenantId": "",
    "GitHubCallbackPath": "",
    "UseClientCredentials": true,
    "IdentityServerCertificateName": "",
    "DataProtectionKeyIdentifier": "",
    "ReadConfigurationFromKeyVault": false
  },
  // External OAuth / OpenId Identity Providers options.
  // Currently supports: GitHub, Azure AD, Google (Gmail), Steam, Facebook
  "ExternalProvidersConfiguration": {
    // Github
    "UseGitHubProvider": false,
    "GitHubClientId": "",
    "GitHubClientSecret": "",
    // Azure AD
    "UseAzureAdProvider": false,
    "AzureAdClientId": "",
    "AzureAdTenantId": "",
    "AzureInstance": "",
    "AzureAdSecret": "",
    "AzureAdCallbackPath": "",
    "AzureDomain": "",
    // Google
    "UseGoogleProvider": true,
    "GoogleClientId": "copy client ID from Google here",
    "GoogleClientSecret": "copy client secret from Google here",
    // Steam
    "UseSteamProvider": true,
    "SteamClientId": "41C797841E709C0757A480444C06BF88",
    "SteamClientSecret": "",
    // Facebook
    "UseFacebookProvider": true,
    "FacebookClientId": "1107513336821407",
    "FacebookClientSecret": "6dca51577d4a3d0edb47fa9c88a487a1"
  }
}
